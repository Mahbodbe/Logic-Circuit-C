
AVRASM ver. 2.1.30  C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm Fri Apr 04 19:47:30 2025

C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer=R4
                 	.DEF _timer_msb=R5
                 	.DEF _loginchecker=R6
                 	.DEF _loginchecker_msb=R7
                 	.DEF _inputcounter=R8
                 	.DEF _inputcounter_msb=R9
                 	.DEF _sscounter=R10
                 	.DEF _sscounter_msb=R11
                 	.DEF _iswrong=R12
                 	.DEF _iswrong_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0079 	JMP  __RESET
000002 940c 00a6 	JMP  _ext_int0_isr
000004 940c 00ab 	JMP  _ext_int1_isr
000006 940c 00b0 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00c0 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
000038 063f
000039 4f5b
00003a 6d66
00003b 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00003c 6f7f
00003d 7c5c
00003e 5e39
00003f 7179      	.DB  0x7F,0x6F,0x5C,0x7C,0x39,0x5E,0x79,0x71
                 _0x4:
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1144): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x5:
C:\Users\mrmah\Desktop\passwordchecker\Debug\List\passwordchecker.asm(1146): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0x0:
000042 203e
000043 454c
000044 0044
000045 7542      	.DB  0x3E,0x20,0x4C,0x45,0x44,0x0,0x42,0x75
000046 7a7a
000047 7265
000048 3e00
000049 4220      	.DB  0x7A,0x7A,0x65,0x72,0x0,0x3E,0x20,0x42
00004a 7a75
00004b 657a
00004c 0072
00004d 203e      	.DB  0x75,0x7A,0x7A,0x65,0x72,0x0,0x3E,0x20
00004e 6552
00004f 616c
000050 0079
000051 6e45      	.DB  0x52,0x65,0x6C,0x61,0x79,0x0,0x45,0x6E
000052 6574
000053 2072
000054 6150
000055 7373      	.DB  0x74,0x65,0x72,0x20,0x50,0x61,0x73,0x73
000056 6f77
000057 6472
000058 003a
000059 6325      	.DB  0x77,0x6F,0x72,0x64,0x3A,0x0,0x25,0x63
00005a 2a00
00005b 3431
00005c 0023
00005d 7257      	.DB  0x0,0x2A,0x31,0x34,0x23,0x0,0x57,0x72
00005e 6e6f
00005f 2067
000060 6170
000061 7373      	.DB  0x6F,0x6E,0x67,0x20,0x70,0x61,0x73,0x73
000062 6f77
000063 6472
000064 0021      	.DB  0x77,0x6F,0x72,0x64,0x21,0x0
                 _0x2020003:
000065 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000066 000a      	.DW  0x0A
000067 0004      	.DW  0x04
000068 0066      	.DW  __REG_VARS*2
                 
000069 0010      	.DW  0x10
00006a 0265      	.DW  _digit
00006b 0070      	.DW  _0x3*2
                 
00006c 0001      	.DW  0x01
00006d 02a1      	.DW  _ismenu
00006e 0080      	.DW  _0x4*2
                 
00006f 0001      	.DW  0x01
000070 02a7      	.DW  _led
000071 0082      	.DW  _0x5*2
                 
000072 0005      	.DW  0x05
000073 0260      	.DW  _0x2E
000074 00b5      	.DW  _0x0*2+49
                 
000075 0002      	.DW  0x02
000076 02a9      	.DW  __base_y_G101
000077 00ca      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000078 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000079 94f8      	CLI
00007a 27ee      	CLR  R30
00007b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007c e0f1      	LDI  R31,1
00007d bffb      	OUT  GICR,R31
00007e bfeb      	OUT  GICR,R30
00007f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000080 e08d      	LDI  R24,(14-2)+1
000081 e0a2      	LDI  R26,2
000082 27bb      	CLR  R27
                 __CLEAR_REG:
000083 93ed      	ST   X+,R30
000084 958a      	DEC  R24
000085 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000086 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000087 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000088 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000089 93ed      	ST   X+,R30
00008a 9701      	SBIW R24,1
00008b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008c ecec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008e 9185      	LPM  R24,Z+
00008f 9195      	LPM  R25,Z+
000090 9700      	SBIW R24,0
000091 f061      	BREQ __GLOBAL_INI_END
000092 91a5      	LPM  R26,Z+
000093 91b5      	LPM  R27,Z+
000094 9005      	LPM  R0,Z+
000095 9015      	LPM  R1,Z+
000096 01bf      	MOVW R22,R30
000097 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000098 9005      	LPM  R0,Z+
000099 920d      	ST   X+,R0
00009a 9701      	SBIW R24,1
00009b f7e1      	BRNE __GLOBAL_INI_LOOP
00009c 01fb      	MOVW R30,R22
00009d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009f bfed      	OUT  SPL,R30
0000a0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a3 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a4 940c 015f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#include <string.h>
                 ;
                 ;#define correctpassword "*14#"
                 ;unsigned char digit[16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
                 ;                           0x7f,0x6f,0x5c,0x7c,0x39,0x5e,0x79,0x71};
                 
                 	.DSEG
                 ;
                 ;int timer = 0;
                 ;int loginchecker = 0;
                 ;int inputcounter = 0;
                 ;int sscounter = 0;
                 ;int iswrong = 0;
                 ;int keypadclicked = 0;
                 ;char iputpass[15];
                 ;char temp[15];
                 ;int passwordPromptShown = 0;
                 ;
                 ;int menu_state = 0;
                 ;int menu = 0;
                 ;int menunext = 0;
                 ;int menuselect = 0;
                 ;
                 ;int menutogglereq = 0;
                 ;int ismenu = 1;
                 ;int menutoggle = 0;
                 ;int buzzer = 0;
                 ;int led =1 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000a6 940e 05ec 	CALL SUBOPT_0x0
                 ; 0000 0022     menuselect++;
0000a8 e9ad      	LDI  R26,LOW(_menuselect)
0000a9 e0b2      	LDI  R27,HIGH(_menuselect)
0000aa c009      	RJMP _0x4B
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0026 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000ab 940e 05ec 	CALL SUBOPT_0x0
                 ; 0000 0027     menunext++;
0000ad e9ab      	LDI  R26,LOW(_menunext)
0000ae e0b2      	LDI  R27,HIGH(_menunext)
0000af c004      	RJMP _0x4B
                 ; 0000 0028 }
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 002B {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000b0 940e 05ec 	CALL SUBOPT_0x0
                 ; 0000 002C     keypadclicked++;
0000b2 e7a5      	LDI  R26,LOW(_keypadclicked)
0000b3 e0b2      	LDI  R27,HIGH(_keypadclicked)
                 _0x4B:
0000b4 91ed      	LD   R30,X+
0000b5 91fd      	LD   R31,X+
0000b6 9631      	ADIW R30,1
0000b7 93fe      	ST   -X,R31
0000b8 93ee      	ST   -X,R30
                 ; 0000 002D }
0000b9 91e9      	LD   R30,Y+
0000ba bfef      	OUT  SREG,R30
0000bb 91f9      	LD   R31,Y+
0000bc 91e9      	LD   R30,Y+
0000bd 91b9      	LD   R27,Y+
0000be 91a9      	LD   R26,Y+
0000bf 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0030 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000c0 93ea      	ST   -Y,R30
0000c1 93fa      	ST   -Y,R31
0000c2 b7ef      	IN   R30,SREG
0000c3 93ea      	ST   -Y,R30
                 ; 0000 0031     timer++;
0000c4 01f2      	MOVW R30,R4
0000c5 9631      	ADIW R30,1
0000c6 012f      	MOVW R4,R30
                 ; 0000 0032 }
0000c7 91e9      	LD   R30,Y+
0000c8 bfef      	OUT  SREG,R30
0000c9 91f9      	LD   R31,Y+
0000ca 91e9      	LD   R30,Y+
0000cb 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;char keypadinput(int keycode) {
                 ; 0000 0035 char keypadinput(int keycode) {
                 _keypadinput:
                 ; .FSTART _keypadinput
                 ; 0000 0036     char keypadoutput = '0';
                 ; 0000 0037     switch(keycode)
0000cc 93ba      	ST   -Y,R27
0000cd 93aa      	ST   -Y,R26
0000ce 931a      	ST   -Y,R17
                 ;	keycode -> Y+1
                 ;	keypadoutput -> R17
0000cf e310      	LDI  R17,48
0000d0 81e9      	LDD  R30,Y+1
0000d1 81fa      	LDD  R31,Y+1+1
                 ; 0000 0038     {
                 ; 0000 0039         case 0x0:
0000d2 9730      	SBIW R30,0
0000d3 f411      	BRNE _0x9
                 ; 0000 003A             keypadoutput = '1';
0000d4 e311      	LDI  R17,LOW(49)
                 ; 0000 003B             break;
0000d5 c059      	RJMP _0x8
                 ; 0000 003C         case 0x1:
                 _0x9:
0000d6 30e1      	CPI  R30,LOW(0x1)
0000d7 e0a0      	LDI  R26,HIGH(0x1)
0000d8 07fa      	CPC  R31,R26
0000d9 f411      	BRNE _0xA
                 ; 0000 003D             keypadoutput = '2';
0000da e312      	LDI  R17,LOW(50)
                 ; 0000 003E             break;
0000db c053      	RJMP _0x8
                 ; 0000 003F         case 0x2:
                 _0xA:
0000dc 30e2      	CPI  R30,LOW(0x2)
0000dd e0a0      	LDI  R26,HIGH(0x2)
0000de 07fa      	CPC  R31,R26
0000df f411      	BRNE _0xB
                 ; 0000 0040             keypadoutput = '3';
0000e0 e313      	LDI  R17,LOW(51)
                 ; 0000 0041             break;
0000e1 c04d      	RJMP _0x8
                 ; 0000 0042         case 0x3:
                 _0xB:
0000e2 30e3      	CPI  R30,LOW(0x3)
0000e3 e0a0      	LDI  R26,HIGH(0x3)
0000e4 07fa      	CPC  R31,R26
0000e5 f411      	BRNE _0xC
                 ; 0000 0043             keypadoutput = 'A';
0000e6 e411      	LDI  R17,LOW(65)
                 ; 0000 0044             break;
0000e7 c047      	RJMP _0x8
                 ; 0000 0045         case 0x4:
                 _0xC:
0000e8 30e4      	CPI  R30,LOW(0x4)
0000e9 e0a0      	LDI  R26,HIGH(0x4)
0000ea 07fa      	CPC  R31,R26
0000eb f411      	BRNE _0xD
                 ; 0000 0046             keypadoutput = '4';
0000ec e314      	LDI  R17,LOW(52)
                 ; 0000 0047             break;
0000ed c041      	RJMP _0x8
                 ; 0000 0048         case 0x5:
                 _0xD:
0000ee 30e5      	CPI  R30,LOW(0x5)
0000ef e0a0      	LDI  R26,HIGH(0x5)
0000f0 07fa      	CPC  R31,R26
0000f1 f411      	BRNE _0xE
                 ; 0000 0049             keypadoutput = '5';
0000f2 e315      	LDI  R17,LOW(53)
                 ; 0000 004A             break;
0000f3 c03b      	RJMP _0x8
                 ; 0000 004B         case 0x6:
                 _0xE:
0000f4 30e6      	CPI  R30,LOW(0x6)
0000f5 e0a0      	LDI  R26,HIGH(0x6)
0000f6 07fa      	CPC  R31,R26
0000f7 f411      	BRNE _0xF
                 ; 0000 004C             keypadoutput = '6';
0000f8 e316      	LDI  R17,LOW(54)
                 ; 0000 004D             break;
0000f9 c035      	RJMP _0x8
                 ; 0000 004E         case 0x7:
                 _0xF:
0000fa 30e7      	CPI  R30,LOW(0x7)
0000fb e0a0      	LDI  R26,HIGH(0x7)
0000fc 07fa      	CPC  R31,R26
0000fd f411      	BRNE _0x10
                 ; 0000 004F             keypadoutput = 'B';
0000fe e412      	LDI  R17,LOW(66)
                 ; 0000 0050             break;
0000ff c02f      	RJMP _0x8
                 ; 0000 0051         case 0x8:
                 _0x10:
000100 30e8      	CPI  R30,LOW(0x8)
000101 e0a0      	LDI  R26,HIGH(0x8)
000102 07fa      	CPC  R31,R26
000103 f411      	BRNE _0x11
                 ; 0000 0052             keypadoutput = '7';
000104 e317      	LDI  R17,LOW(55)
                 ; 0000 0053             break;
000105 c029      	RJMP _0x8
                 ; 0000 0054         case 0x9:
                 _0x11:
000106 30e9      	CPI  R30,LOW(0x9)
000107 e0a0      	LDI  R26,HIGH(0x9)
000108 07fa      	CPC  R31,R26
000109 f411      	BRNE _0x12
                 ; 0000 0055             keypadoutput = '8';
00010a e318      	LDI  R17,LOW(56)
                 ; 0000 0056             break;
00010b c023      	RJMP _0x8
                 ; 0000 0057         case 0xA:
                 _0x12:
00010c 30ea      	CPI  R30,LOW(0xA)
00010d e0a0      	LDI  R26,HIGH(0xA)
00010e 07fa      	CPC  R31,R26
00010f f411      	BRNE _0x13
                 ; 0000 0058             keypadoutput = '9';
000110 e319      	LDI  R17,LOW(57)
                 ; 0000 0059             break;
000111 c01d      	RJMP _0x8
                 ; 0000 005A         case 0xB:
                 _0x13:
000112 30eb      	CPI  R30,LOW(0xB)
000113 e0a0      	LDI  R26,HIGH(0xB)
000114 07fa      	CPC  R31,R26
000115 f411      	BRNE _0x14
                 ; 0000 005B             keypadoutput = 'C';
000116 e413      	LDI  R17,LOW(67)
                 ; 0000 005C             break;
000117 c017      	RJMP _0x8
                 ; 0000 005D         case 0xC:
                 _0x14:
000118 30ec      	CPI  R30,LOW(0xC)
000119 e0a0      	LDI  R26,HIGH(0xC)
00011a 07fa      	CPC  R31,R26
00011b f411      	BRNE _0x15
                 ; 0000 005E             keypadoutput = '*';
00011c e21a      	LDI  R17,LOW(42)
                 ; 0000 005F             break;
00011d c011      	RJMP _0x8
                 ; 0000 0060         case 0xD:
                 _0x15:
00011e 30ed      	CPI  R30,LOW(0xD)
00011f e0a0      	LDI  R26,HIGH(0xD)
000120 07fa      	CPC  R31,R26
000121 f411      	BRNE _0x16
                 ; 0000 0061             keypadoutput = '0';
000122 e310      	LDI  R17,LOW(48)
                 ; 0000 0062             break;
000123 c00b      	RJMP _0x8
                 ; 0000 0063         case 0xE:
                 _0x16:
000124 30ee      	CPI  R30,LOW(0xE)
000125 e0a0      	LDI  R26,HIGH(0xE)
000126 07fa      	CPC  R31,R26
000127 f411      	BRNE _0x17
                 ; 0000 0064             keypadoutput = '#';
000128 e213      	LDI  R17,LOW(35)
                 ; 0000 0065             break;
000129 c005      	RJMP _0x8
                 ; 0000 0066         case 0xF:
                 _0x17:
00012a 30ef      	CPI  R30,LOW(0xF)
00012b e0a0      	LDI  R26,HIGH(0xF)
00012c 07fa      	CPC  R31,R26
00012d f409      	BRNE _0x8
                 ; 0000 0067             keypadoutput = 'D';
00012e e414      	LDI  R17,LOW(68)
                 ; 0000 0068             break;
                 ; 0000 0069     }
                 _0x8:
                 ; 0000 006A     return keypadoutput;
00012f 2fe1      	MOV  R30,R17
000130 940c 057d 	JMP  _0x2080003
                 ; 0000 006B }
                 ; .FEND
                 ;
                 ;void displayMainMenu()
                 ; 0000 006E {
                 _displayMainMenu:
                 ; .FSTART _displayMainMenu
                 ; 0000 006F     lcd_clear();
000132 940e 0530 	CALL _lcd_clear
                 ; 0000 0070     switch(menu)
000134 91e0 0299 	LDS  R30,_menu
000136 91f0 029a 	LDS  R31,_menu+1
                 ; 0000 0071     {
                 ; 0000 0072         case 0:
000138 9730      	SBIW R30,0
000139 f449      	BRNE _0x1C
                 ; 0000 0073             lcd_gotoxy(0,0); lcd_putsf("> LED");
00013a 940e 05f3 	CALL SUBOPT_0x1
                +
00013c e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00013d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00013e 940e 05f8 	CALL SUBOPT_0x2
                 ; 0000 0074             lcd_gotoxy(0,1); lcd_putsf("Buzzer");
                +
000140 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000141 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000142 c019      	RJMP _0x49
                 ; 0000 0075             break;
                 ; 0000 0076         case 1:
                 _0x1C:
000143 30e1      	CPI  R30,LOW(0x1)
000144 e0a0      	LDI  R26,HIGH(0x1)
000145 07fa      	CPC  R31,R26
000146 f449      	BRNE _0x1D
                 ; 0000 0077             lcd_gotoxy(0,0); lcd_putsf("LED");
000147 940e 05f3 	CALL SUBOPT_0x1
                +
000149 e8a6     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
00014a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
00014b 940e 05f8 	CALL SUBOPT_0x2
                 ; 0000 0078             lcd_gotoxy(0,1); lcd_putsf("> Buzzer");
                +
00014d e9a1     +LDI R26 , LOW ( 2 * _0x0 + ( 13 ) )
00014e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW2FN _0x0,13
00014f c00c      	RJMP _0x49
                 ; 0000 0079             break;
                 ; 0000 007A         case 2:
                 _0x1D:
000150 30e2      	CPI  R30,LOW(0x2)
000151 e0a0      	LDI  R26,HIGH(0x2)
000152 07fa      	CPC  R31,R26
000153 f451      	BRNE _0x1B
                 ; 0000 007B             lcd_gotoxy(0,0); lcd_putsf("Buzzer");
000154 940e 05f3 	CALL SUBOPT_0x1
                +
000156 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000157 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000158 940e 05f8 	CALL SUBOPT_0x2
                 ; 0000 007C             lcd_gotoxy(0,1); lcd_putsf("> Relay");
                +
00015a e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 22 ) )
00015b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW2FN _0x0,22
                 _0x49:
00015c 940e 056d 	CALL _lcd_putsf
                 ; 0000 007D             break;
                 ; 0000 007E     }
                 _0x1B:
                 ; 0000 007F }
00015e 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0088 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00015f efef      	LDI  R30,LOW(255)
000160 bbea      	OUT  0x1A,R30
                 ; 0000 0089 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 008A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000161 e0e0      	LDI  R30,LOW(0)
000162 bbeb      	OUT  0x1B,R30
                 ; 0000 008B PORTA = digit[sscounter];
000163 940e 05ff 	CALL SUBOPT_0x3
                 ; 0000 008C 
                 ; 0000 008D // Port B initialization
                 ; 0000 008E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000165 e0e0      	LDI  R30,LOW(0)
000166 bbe7      	OUT  0x17,R30
                 ; 0000 0090 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0091 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000167 bbe8      	OUT  0x18,R30
                 ; 0000 0092 
                 ; 0000 0093 // Port C initialization
                 ; 0000 0094 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0095 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000168 e0e7      	LDI  R30,LOW(7)
000169 bbe4      	OUT  0x14,R30
                 ; 0000 0096 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0097 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00016a e0e0      	LDI  R30,LOW(0)
00016b bbe5      	OUT  0x15,R30
                 ; 0000 0098 
                 ; 0000 0099 // Port D initialization
                 ; 0000 009A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00016c bbe1      	OUT  0x11,R30
                 ; 0000 009C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00016d bbe2      	OUT  0x12,R30
                 ; 0000 009E 
                 ; 0000 009F // Timer/Counter 0 initialization
                 ; 0000 00A0 // Clock source: System Clock
                 ; 0000 00A1 // Clock value: 125.000 kHz
                 ; 0000 00A2 // Mode: Normal top=0xFF
                 ; 0000 00A3 // OC0 output: Disconnected
                 ; 0000 00A4 // Timer Period: 2.048 ms
                 ; 0000 00A5 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
00016e e0e3      	LDI  R30,LOW(3)
00016f bfe3      	OUT  0x33,R30
                 ; 0000 00A6 TCNT0=0x00;
000170 e0e0      	LDI  R30,LOW(0)
000171 bfe2      	OUT  0x32,R30
                 ; 0000 00A7 OCR0=0x00;
000172 bfec      	OUT  0x3C,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Timer/Counter 1 initialization
                 ; 0000 00AA // Clock source: System Clock
                 ; 0000 00AB // Clock value: Timer1 Stopped
                 ; 0000 00AC // Mode: Normal top=0xFFFF
                 ; 0000 00AD // OC1A output: Disconnected
                 ; 0000 00AE // OC1B output: Disconnected
                 ; 0000 00AF // Noise Canceler: Off
                 ; 0000 00B0 // Input Capture on Falling Edge
                 ; 0000 00B1 // Timer1 Overflow Interrupt: Off
                 ; 0000 00B2 // Input Capture Interrupt: Off
                 ; 0000 00B3 // Compare A Match Interrupt: Off
                 ; 0000 00B4 // Compare B Match Interrupt: Off
                 ; 0000 00B5 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000173 bdef      	OUT  0x2F,R30
                 ; 0000 00B6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000174 bdee      	OUT  0x2E,R30
                 ; 0000 00B7 TCNT1H=0x00;
000175 bded      	OUT  0x2D,R30
                 ; 0000 00B8 TCNT1L=0x00;
000176 bdec      	OUT  0x2C,R30
                 ; 0000 00B9 ICR1H=0x00;
000177 bde7      	OUT  0x27,R30
                 ; 0000 00BA ICR1L=0x00;
000178 bde6      	OUT  0x26,R30
                 ; 0000 00BB OCR1AH=0x00;
000179 bdeb      	OUT  0x2B,R30
                 ; 0000 00BC OCR1AL=0x00;
00017a bdea      	OUT  0x2A,R30
                 ; 0000 00BD OCR1BH=0x00;
00017b bde9      	OUT  0x29,R30
                 ; 0000 00BE OCR1BL=0x00;
00017c bde8      	OUT  0x28,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer/Counter 2 initialization
                 ; 0000 00C1 // Clock source: System Clock
                 ; 0000 00C2 // Clock value: Timer2 Stopped
                 ; 0000 00C3 // Mode: Normal top=0xFF
                 ; 0000 00C4 // OC2 output: Disconnected
                 ; 0000 00C5 ASSR=0<<AS2;
00017d bde2      	OUT  0x22,R30
                 ; 0000 00C6 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00017e bde5      	OUT  0x25,R30
                 ; 0000 00C7 TCNT2=0x00;
00017f bde4      	OUT  0x24,R30
                 ; 0000 00C8 OCR2=0x00;
000180 bde3      	OUT  0x23,R30
                 ; 0000 00C9 
                 ; 0000 00CA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CB TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000181 e0e1      	LDI  R30,LOW(1)
000182 bfe9      	OUT  0x39,R30
                 ; 0000 00CC 
                 ; 0000 00CD // External Interrupt(s) initialization
                 ; 0000 00CE // INT0: On
                 ; 0000 00CF // INT0 Mode: Falling Edge
                 ; 0000 00D0 // INT1: On
                 ; 0000 00D1 // INT1 Mode: Rising Edge
                 ; 0000 00D2 // INT2: On
                 ; 0000 00D3 // INT2 Mode: Falling Edge
                 ; 0000 00D4 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
000183 b7eb      	IN   R30,0x3B
000184 6ee0      	ORI  R30,LOW(0xE0)
000185 bfeb      	OUT  0x3B,R30
                 ; 0000 00D5 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (0<<ISC00);
000186 e0ee      	LDI  R30,LOW(14)
000187 bfe5      	OUT  0x35,R30
                 ; 0000 00D6 MCUCSR=(0<<ISC2);
000188 e0e0      	LDI  R30,LOW(0)
000189 bfe4      	OUT  0x34,R30
                 ; 0000 00D7 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
00018a eee0      	LDI  R30,LOW(224)
00018b bfea      	OUT  0x3A,R30
                 ; 0000 00D8 
                 ; 0000 00D9 // USART initialization
                 ; 0000 00DA // USART disabled
                 ; 0000 00DB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00018c e0e0      	LDI  R30,LOW(0)
00018d b9ea      	OUT  0xA,R30
                 ; 0000 00DC 
                 ; 0000 00DD // Analog Comparator initialization
                 ; 0000 00DE // Analog Comparator: Off
                 ; 0000 00DF // The Analog Comparator's positive input is
                 ; 0000 00E0 // connected to the AIN0 pin
                 ; 0000 00E1 // The Analog Comparator's negative input is
                 ; 0000 00E2 // connected to the AIN1 pin
                 ; 0000 00E3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00018e e8e0      	LDI  R30,LOW(128)
00018f b9e8      	OUT  0x8,R30
                 ; 0000 00E4 SFIOR=(0<<ACME);
000190 e0e0      	LDI  R30,LOW(0)
000191 bfe0      	OUT  0x30,R30
                 ; 0000 00E5 
                 ; 0000 00E6 // ADC initialization
                 ; 0000 00E7 // ADC disabled
                 ; 0000 00E8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000192 b9e6      	OUT  0x6,R30
                 ; 0000 00E9 
                 ; 0000 00EA // SPI initialization
                 ; 0000 00EB // SPI disabled
                 ; 0000 00EC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000193 b9ed      	OUT  0xD,R30
                 ; 0000 00ED 
                 ; 0000 00EE // TWI initialization
                 ; 0000 00EF // TWI disabled
                 ; 0000 00F0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000194 bfe6      	OUT  0x36,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // Alphanumeric LCD initialization
                 ; 0000 00F3 // Connections are specified in the
                 ; 0000 00F4 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F5 // RS - PORTB Bit 0
                 ; 0000 00F6 // RD - PORTB Bit 1
                 ; 0000 00F7 // EN - PORTB Bit 3
                 ; 0000 00F8 // D4 - PORTB Bit 4
                 ; 0000 00F9 // D5 - PORTB Bit 5
                 ; 0000 00FA // D6 - PORTB Bit 6
                 ; 0000 00FB // D7 - PORTB Bit 7
                 ; 0000 00FC 
                 ; 0000 00FD // Characters/line: 16
                 ; 0000 00FE lcd_init(16);
000195 e1a0      	LDI  R26,LOW(16)
000196 940e 0580 	CALL _lcd_init
                 ; 0000 00FF 
                 ; 0000 0100 // Global enable interrupts
                 ; 0000 0101 #asm("sei")
000198 9478      	sei
                 ; 0000 0102 
                 ; 0000 0103     while (1)
                 _0x1F:
                 ; 0000 0104     {
                 ; 0000 0105         if(!loginchecker)
000199 2c06      	MOV  R0,R6
00019a 2807      	OR   R0,R7
00019b f009      	BREQ PC+2
00019c c0dc      	RJMP _0x22
                 ; 0000 0106         {
                 ; 0000 0107             char str[2];
                 ; 0000 0108             if(inputcounter == 0 && !passwordPromptShown && !iswrong)
00019d 9722      	SBIW R28,2
                 ;	str -> Y+0
00019e 2400      	CLR  R0
00019f 1408      	CP   R0,R8
0001a0 0409      	CPC  R0,R9
0001a1 f449      	BRNE _0x24
0001a2 91e0 0295 	LDS  R30,_passwordPromptShown
0001a4 91f0 0296 	LDS  R31,_passwordPromptShown+1
0001a6 9730      	SBIW R30,0
0001a7 f419      	BRNE _0x24
0001a8 2c0c      	MOV  R0,R12
0001a9 280d      	OR   R0,R13
0001aa f009      	BREQ _0x25
                 _0x24:
0001ab c00e      	RJMP _0x23
                 _0x25:
                 ; 0000 0109             {
                 ; 0000 010A                 lcd_clear();
0001ac 940e 0530 	CALL _lcd_clear
                 ; 0000 010B                 lcd_gotoxy(0,0);
0001ae 940e 05f3 	CALL SUBOPT_0x1
                 ; 0000 010C                 lcd_putsf("Enter Password:");
                +
0001b0 eaa2     +LDI R26 , LOW ( 2 * _0x0 + ( 30 ) )
0001b1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 30 ) )
                 	__POINTW2FN _0x0,30
0001b2 940e 056d 	CALL _lcd_putsf
                 ; 0000 010D                 passwordPromptShown = 1;
0001b4 e0e1      	LDI  R30,LOW(1)
0001b5 e0f0      	LDI  R31,HIGH(1)
0001b6 93e0 0295 	STS  _passwordPromptShown,R30
0001b8 93f0 0296 	STS  _passwordPromptShown+1,R31
                 ; 0000 010E             }
                 ; 0000 010F 
                 ; 0000 0110             if (timer > 488 && !iswrong)
                 _0x23:
0001ba 940e 0606 	CALL SUBOPT_0x4
0001bc f41c      	BRGE _0x27
0001bd 2c0c      	MOV  R0,R12
0001be 280d      	OR   R0,R13
0001bf f009      	BREQ _0x28
                 _0x27:
0001c0 c00e      	RJMP _0x26
                 _0x28:
                 ; 0000 0111             {
                 ; 0000 0112                 PORTA = digit[sscounter];
0001c1 940e 05ff 	CALL SUBOPT_0x3
                 ; 0000 0113                 sscounter++;
0001c3 01f5      	MOVW R30,R10
0001c4 9631      	ADIW R30,1
0001c5 015f      	MOVW R10,R30
                 ; 0000 0114                 timer = 0;
0001c6 2444      	CLR  R4
0001c7 2455      	CLR  R5
                 ; 0000 0115                 if (sscounter > 15)
0001c8 e0ef      	LDI  R30,LOW(15)
0001c9 e0f0      	LDI  R31,HIGH(15)
0001ca 15ea      	CP   R30,R10
0001cb 05fb      	CPC  R31,R11
0001cc f414      	BRGE _0x29
                 ; 0000 0116                 {
                 ; 0000 0117                     sscounter = 0;
0001cd 24aa      	CLR  R10
0001ce 24bb      	CLR  R11
                 ; 0000 0118                 }
                 ; 0000 0119             }
                 _0x29:
                 ; 0000 011A 
                 ; 0000 011B 
                 ; 0000 011C             if(keypadclicked)
                 _0x26:
0001cf 91e0 0275 	LDS  R30,_keypadclicked
0001d1 91f0 0276 	LDS  R31,_keypadclicked+1
0001d3 9730      	SBIW R30,0
0001d4 f409      	BRNE PC+2
0001d5 c088      	RJMP _0x2A
                 ; 0000 011D             {
                 ; 0000 011E                 keypadclicked = 0;
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 93e0 0275 	STS  _keypadclicked,R30
0001d9 93e0 0276 	STS  _keypadclicked+1,R30
                 ; 0000 011F                 if(inputcounter < 4)
0001db e0e4      	LDI  R30,LOW(4)
0001dc e0f0      	LDI  R31,HIGH(4)
0001dd 168e      	CP   R8,R30
0001de 069f      	CPC  R9,R31
0001df f00c      	BRLT PC+2
0001e0 c07d      	RJMP _0x2B
                 ; 0000 0120                 {
                 ; 0000 0121                     lcd_gotoxy(0,1);
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 93ea      	ST   -Y,R30
0001e3 e0a1      	LDI  R26,LOW(1)
0001e4 940e 051f 	CALL _lcd_gotoxy
                 ; 0000 0122                     sprintf(str, "%c", keypadinput((PIND & 0xF0) >> 4));
0001e6 01fe      	MOVW R30,R28
0001e7 93fa      	ST   -Y,R31
0001e8 93ea      	ST   -Y,R30
                +
0001e9 ebe2     +LDI R30 , LOW ( 2 * _0x0 + ( 46 ) )
0001ea e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 46 ) )
                 	__POINTW1FN _0x0,46
0001eb 93fa      	ST   -Y,R31
0001ec 93ea      	ST   -Y,R30
0001ed b3e0      	IN   R30,0x10
0001ee 7fe0      	ANDI R30,LOW(0xF0)
0001ef e0f0      	LDI  R31,0
0001f0 940e 067b 	CALL __ASRW4
0001f2 01df      	MOVW R26,R30
0001f3 ded8      	RCALL _keypadinput
0001f4 27ff      	CLR  R31
0001f5 2766      	CLR  R22
0001f6 2777      	CLR  R23
0001f7 940e 06ad 	CALL __PUTPARD1
0001f9 e084      	LDI  R24,4
0001fa 940e 04cb 	CALL _sprintf
0001fc 9628      	ADIW R28,8
                 ; 0000 0123                     iputpass[inputcounter] = str[0];
0001fd 01f4      	MOVW R30,R8
0001fe 58e9      	SUBI R30,LOW(-_iputpass)
0001ff 4ffd      	SBCI R31,HIGH(-_iputpass)
000200 81a8      	LD   R26,Y
000201 83a0      	STD  Z+0,R26
                 ; 0000 0124                     temp[inputcounter] = '*';
000202 e8a6      	LDI  R26,LOW(_temp)
000203 e0b2      	LDI  R27,HIGH(_temp)
000204 0da8      	ADD  R26,R8
000205 1db9      	ADC  R27,R9
000206 e2ea      	LDI  R30,LOW(42)
000207 93ec      	ST   X,R30
                 ; 0000 0125                     temp[inputcounter + 1] = '\0';
000208 01f4      	MOVW R30,R8
                +
000209 57e9     +SUBI R30 , LOW ( - _temp - ( 1 ) )
00020a 4ffd     +SBCI R31 , HIGH ( - _temp - ( 1 ) )
                 	__ADDW1MN _temp,1
00020b e0a0      	LDI  R26,LOW(0)
00020c 83a0      	STD  Z+0,R26
                 ; 0000 0126                     lcd_puts(temp);
00020d e8a6      	LDI  R26,LOW(_temp)
00020e e0b2      	LDI  R27,HIGH(_temp)
00020f 940e 055e 	CALL _lcd_puts
                 ; 0000 0127                     inputcounter++;
000211 01f4      	MOVW R30,R8
000212 9631      	ADIW R30,1
000213 014f      	MOVW R8,R30
                 ; 0000 0128                     if(inputcounter == 4)
000214 e0e4      	LDI  R30,LOW(4)
000215 e0f0      	LDI  R31,HIGH(4)
000216 15e8      	CP   R30,R8
000217 05f9      	CPC  R31,R9
000218 f009      	BREQ PC+2
000219 c044      	RJMP _0x2C
                 ; 0000 0129                     {
                 ; 0000 012A                         iputpass[4] = '\0';
00021a e0e0      	LDI  R30,LOW(0)
                +
00021b 93e0 027b+STS _iputpass + ( 4 ) , R30
                 	__PUTB1MN _iputpass,4
                 ; 0000 012B                         if (!strcmp(iputpass, correctpassword))
00021d 940e 060b 	CALL SUBOPT_0x5
                +
00021f e6a0     +LDI R26 , LOW ( _0x2E + ( 0 ) )
000220 e0b2     +LDI R27 , HIGH ( _0x2E + ( 0 ) )
                 	__POINTW2MN _0x2E,0
000221 940e 05bf 	CALL _strcmp
000223 30e0      	CPI  R30,0
000224 f509      	BRNE _0x2D
                 ; 0000 012C                         {
                 ; 0000 012D                             lcd_clear();
000225 940e 0530 	CALL _lcd_clear
                 ; 0000 012E                             displayMainMenu();
000227 df0a      	RCALL _displayMainMenu
                 ; 0000 012F                             loginchecker = 1;
000228 e0e1      	LDI  R30,LOW(1)
000229 e0f0      	LDI  R31,HIGH(1)
00022a 013f      	MOVW R6,R30
                 ; 0000 0130 
                 ; 0000 0131                             menu_state = 0;
00022b e0e0      	LDI  R30,LOW(0)
00022c 93e0 0297 	STS  _menu_state,R30
00022e 93e0 0298 	STS  _menu_state+1,R30
                 ; 0000 0132                             menu = 0;
000230 93e0 0299 	STS  _menu,R30
000232 93e0 029a 	STS  _menu+1,R30
                 ; 0000 0133                             ismenu = 1;
000234 e0e1      	LDI  R30,LOW(1)
000235 e0f0      	LDI  R31,HIGH(1)
000236 93e0 02a1 	STS  _ismenu,R30
000238 93f0 02a2 	STS  _ismenu+1,R31
                 ; 0000 0134                             menutogglereq = 0;
00023a e0e0      	LDI  R30,LOW(0)
00023b 93e0 029f 	STS  _menutogglereq,R30
00023d 93e0 02a0 	STS  _menutogglereq+1,R30
                 ; 0000 0135                             menutoggle = 0;
00023f 940e 0610 	CALL SUBOPT_0x6
                 ; 0000 0136                             buzzer = 0;
000241 93e0 02a5 	STS  _buzzer,R30
000243 93e0 02a6 	STS  _buzzer+1,R30
                 ; 0000 0137                         }
                 ; 0000 0138                         else
000245 c018      	RJMP _0x2F
                 _0x2D:
                 ; 0000 0139                         {
                 ; 0000 013A                             lcd_clear();
000246 940e 0530 	CALL _lcd_clear
                 ; 0000 013B                             lcd_gotoxy(0,0);
000248 940e 05f3 	CALL SUBOPT_0x1
                 ; 0000 013C                             lcd_putsf("Wrong password!");
                +
00024a ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 54 ) )
00024b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 54 ) )
                 	__POINTW2FN _0x0,54
00024c 940e 056d 	CALL _lcd_putsf
                 ; 0000 013D                             iswrong = 1;
00024e e0e1      	LDI  R30,LOW(1)
00024f e0f0      	LDI  R31,HIGH(1)
000250 016f      	MOVW R12,R30
                 ; 0000 013E                             timer = 0;
000251 2444      	CLR  R4
000252 2455      	CLR  R5
                 ; 0000 013F                             memset(iputpass, 0, sizeof(iputpass));
000253 940e 060b 	CALL SUBOPT_0x5
000255 940e 0616 	CALL SUBOPT_0x7
                 ; 0000 0140                             memset(temp, 0, sizeof(temp));
000257 940e 061c 	CALL SUBOPT_0x8
                 ; 0000 0141                             passwordPromptShown = 0;
000259 e0e0      	LDI  R30,LOW(0)
00025a 93e0 0295 	STS  _passwordPromptShown,R30
00025c 93e0 0296 	STS  _passwordPromptShown+1,R30
                 ; 0000 0142                         }
                 _0x2F:
                 ; 0000 0143                     }
                 ; 0000 0144                 }
                 _0x2C:
                 ; 0000 0145 
                 ; 0000 0146             }
                 _0x2B:
                 ; 0000 0147 
                 ; 0000 0148             if(iswrong)
                 _0x2A:
00025e 2c0c      	MOV  R0,R12
00025f 280d      	OR   R0,R13
000260 f0b1      	BREQ _0x30
                 ; 0000 0149             {
                 ; 0000 014A                 if (timer > 488)
000261 940e 0606 	CALL SUBOPT_0x4
000263 f49c      	BRGE _0x31
                 ; 0000 014B                 {
                 ; 0000 014C                     timer = 0;
000264 2444      	CLR  R4
000265 2455      	CLR  R5
                 ; 0000 014D                     lcd_clear();
000266 940e 0530 	CALL _lcd_clear
                 ; 0000 014E                     iswrong = 0;
000268 24cc      	CLR  R12
000269 24dd      	CLR  R13
                 ; 0000 014F                     inputcounter = 0;
00026a 2488      	CLR  R8
00026b 2499      	CLR  R9
                 ; 0000 0150                     memset(iputpass, 0, sizeof(iputpass));
00026c 940e 060b 	CALL SUBOPT_0x5
00026e 940e 0616 	CALL SUBOPT_0x7
                 ; 0000 0151                     memset(temp, 0, sizeof(temp));
000270 940e 061c 	CALL SUBOPT_0x8
                 ; 0000 0152                     passwordPromptShown = 0;
000272 e0e0      	LDI  R30,LOW(0)
000273 93e0 0295 	STS  _passwordPromptShown,R30
000275 93e0 0296 	STS  _passwordPromptShown+1,R30
                 ; 0000 0153                 }
                 ; 0000 0154             }
                 _0x31:
                 ; 0000 0155         }
                 _0x30:
000277 9622      	ADIW R28,2
                 ; 0000 0156         else
000278 c0dc      	RJMP _0x32
                 _0x22:
                 ; 0000 0157         {
                 ; 0000 0158             if(menuselect)
000279 91e0 029d 	LDS  R30,_menuselect
00027b 91f0 029e 	LDS  R31,_menuselect+1
00027d 9730      	SBIW R30,0
00027e f059      	BREQ _0x33
                 ; 0000 0159             {
                 ; 0000 015A                 menuselect = 0;
00027f e0e0      	LDI  R30,LOW(0)
000280 93e0 029d 	STS  _menuselect,R30
000282 93e0 029e 	STS  _menuselect+1,R30
                 ; 0000 015B                 menutogglereq = 1;
000284 e0e1      	LDI  R30,LOW(1)
000285 e0f0      	LDI  R31,HIGH(1)
000286 93e0 029f 	STS  _menutogglereq,R30
000288 93f0 02a0 	STS  _menutogglereq+1,R31
                 ; 0000 015C             }
                 ; 0000 015D             if(menunext)
                 _0x33:
00028a 91e0 029b 	LDS  R30,_menunext
00028c 91f0 029c 	LDS  R31,_menunext+1
00028e 9730      	SBIW R30,0
00028f f059      	BREQ _0x34
                 ; 0000 015E             {
                 ; 0000 015F                 menunext = 0;
000290 e0e0      	LDI  R30,LOW(0)
000291 93e0 029b 	STS  _menunext,R30
000293 93e0 029c 	STS  _menunext+1,R30
                 ; 0000 0160                 menutoggle = 1;
000295 e0e1      	LDI  R30,LOW(1)
000296 e0f0      	LDI  R31,HIGH(1)
000297 93e0 02a3 	STS  _menutoggle,R30
000299 93f0 02a4 	STS  _menutoggle+1,R31
                 ; 0000 0161             }
                 ; 0000 0162 
                 ; 0000 0163             if (menutogglereq)
                 _0x34:
00029b 91e0 029f 	LDS  R30,_menutogglereq
00029d 91f0 02a0 	LDS  R31,_menutogglereq+1
00029f 9730      	SBIW R30,0
0002a0 f1b9      	BREQ _0x35
                 ; 0000 0164             {
                 ; 0000 0165                 if (timer > 97)
0002a1 e6e1      	LDI  R30,LOW(97)
0002a2 e0f0      	LDI  R31,HIGH(97)
0002a3 15e4      	CP   R30,R4
0002a4 05f5      	CPC  R31,R5
0002a5 f594      	BRGE _0x36
                 ; 0000 0166                 {
                 ; 0000 0167                     timer = 0;
0002a6 2444      	CLR  R4
0002a7 2455      	CLR  R5
                 ; 0000 0168                     menutogglereq = 0;
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 93e0 029f 	STS  _menutogglereq,R30
0002ab 93e0 02a0 	STS  _menutogglereq+1,R30
                 ; 0000 0169                     ismenu ^= 1;
0002ad 91a0 02a1 	LDS  R26,_ismenu
0002af 91b0 02a2 	LDS  R27,_ismenu+1
0002b1 e0e1      	LDI  R30,LOW(1)
0002b2 e0f0      	LDI  R31,HIGH(1)
0002b3 27ea      	EOR  R30,R26
0002b4 27fb      	EOR  R31,R27
0002b5 93e0 02a1 	STS  _ismenu,R30
0002b7 93f0 02a2 	STS  _ismenu+1,R31
                 ; 0000 016A                     PORTC = 0x00;
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba bbe5      	OUT  0x15,R30
                 ; 0000 016B                     lcd_clear();
0002bb 940e 0530 	CALL _lcd_clear
                 ; 0000 016C                     menutoggle = 0;
0002bd 940e 0610 	CALL SUBOPT_0x6
                 ; 0000 016D                     PORTA = 0x00;
0002bf bbeb      	OUT  0x1B,R30
                 ; 0000 016E                     buzzer = 0;
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 93e0 02a5 	STS  _buzzer,R30
0002c3 93e0 02a6 	STS  _buzzer+1,R30
                 ; 0000 016F                     if(ismenu)
0002c5 91e0 02a1 	LDS  R30,_ismenu
0002c7 91f0 02a2 	LDS  R31,_ismenu+1
0002c9 9730      	SBIW R30,0
0002ca f031      	BREQ _0x37
                 ; 0000 0170                         menu_state = 0;
0002cb e0e0      	LDI  R30,LOW(0)
0002cc 93e0 0297 	STS  _menu_state,R30
0002ce 93e0 0298 	STS  _menu_state+1,R30
                 ; 0000 0171                     else
0002d0 c006      	RJMP _0x38
                 _0x37:
                 ; 0000 0172                         menu_state = 1;
0002d1 e0e1      	LDI  R30,LOW(1)
0002d2 e0f0      	LDI  R31,HIGH(1)
0002d3 93e0 0297 	STS  _menu_state,R30
0002d5 93f0 0298 	STS  _menu_state+1,R31
                 ; 0000 0173                     displayMainMenu();
                 _0x38:
0002d7 de5a      	RCALL _displayMainMenu
                 ; 0000 0174                 }
                 ; 0000 0175             }
                 _0x36:
                 ; 0000 0176 
                 ; 0000 0177             if(ismenu)
                 _0x35:
0002d8 91e0 02a1 	LDS  R30,_ismenu
0002da 91f0 02a2 	LDS  R31,_ismenu+1
0002dc 9730      	SBIW R30,0
0002dd f139      	BREQ _0x39
                 ; 0000 0178             {
                 ; 0000 0179                 if(menutoggle)
0002de 91e0 02a3 	LDS  R30,_menutoggle
0002e0 91f0 02a4 	LDS  R31,_menutoggle+1
0002e2 9730      	SBIW R30,0
0002e3 f101      	BREQ _0x3A
                 ; 0000 017A                 {
                 ; 0000 017B                     if(timer > 97)
0002e4 e6e1      	LDI  R30,LOW(97)
0002e5 e0f0      	LDI  R31,HIGH(97)
0002e6 15e4      	CP   R30,R4
0002e7 05f5      	CPC  R31,R5
0002e8 f4dc      	BRGE _0x3B
                 ; 0000 017C                     {
                 ; 0000 017D                         timer = 0;
0002e9 2444      	CLR  R4
0002ea 2455      	CLR  R5
                 ; 0000 017E                         menutoggle = 0;
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 93e0 02a3 	STS  _menutoggle,R30
0002ee 93e0 02a4 	STS  _menutoggle+1,R30
                 ; 0000 017F                         menu = (menu + 1) % 3;
0002f0 91a0 0299 	LDS  R26,_menu
0002f2 91b0 029a 	LDS  R27,_menu+1
0002f4 9611      	ADIW R26,1
0002f5 e0e3      	LDI  R30,LOW(3)
0002f6 e0f0      	LDI  R31,HIGH(3)
0002f7 940e 0697 	CALL __MODW21
0002f9 93e0 0299 	STS  _menu,R30
0002fb 93f0 029a 	STS  _menu+1,R31
                 ; 0000 0180                         displayMainMenu();
0002fd de34      	RCALL _displayMainMenu
                 ; 0000 0181                         led =1;
0002fe e0e1      	LDI  R30,LOW(1)
0002ff e0f0      	LDI  R31,HIGH(1)
000300 93e0 02a7 	STS  _led,R30
000302 93f0 02a8 	STS  _led+1,R31
                 ; 0000 0182                     }
                 ; 0000 0183                 }
                 _0x3B:
                 ; 0000 0184             }
                 _0x3A:
                 ; 0000 0185             else
000304 c050      	RJMP _0x3C
                 _0x39:
                 ; 0000 0186             {
                 ; 0000 0187                 switch (menu)
000305 91e0 0299 	LDS  R30,_menu
000307 91f0 029a 	LDS  R31,_menu+1
                 ; 0000 0188                 {
                 ; 0000 0189                     case 0:
000309 9730      	SBIW R30,0
00030a f481      	BRNE _0x40
                 ; 0000 018A                         if(led)
00030b 940e 0621 	CALL SUBOPT_0x9
00030d f011      	BREQ _0x41
                 ; 0000 018B                         {
                 ; 0000 018C                            lcd_clear();
00030e 940e 0627 	CALL SUBOPT_0xA
                 ; 0000 018D                            led =0;
                 ; 0000 018E                         }
                 ; 0000 018F                         lcd_gotoxy(0, 0);
                 _0x41:
000310 940e 05f3 	CALL SUBOPT_0x1
                 ; 0000 0190                         lcd_putsf("LED");
                +
000312 e8a6     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
000313 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
000314 940e 056d 	CALL _lcd_putsf
                 ; 0000 0191                         PORTC = 0x01;
000316 e0e1      	LDI  R30,LOW(1)
000317 bbe5      	OUT  0x15,R30
                 ; 0000 0192                         PORTA = digit[10];
                +
000318 91e0 026f+LDS R30 , _digit + ( 10 )
                 	__GETB1MN _digit,10
00031a c039      	RJMP _0x4A
                 ; 0000 0193                         break;
                 ; 0000 0194                     case 1:
                 _0x40:
00031b 30e1      	CPI  R30,LOW(0x1)
00031c e0a0      	LDI  R26,HIGH(0x1)
00031d 07fa      	CPC  R31,R26
00031e f511      	BRNE _0x42
                 ; 0000 0195                         if(led)
00031f 940e 0621 	CALL SUBOPT_0x9
000321 f011      	BREQ _0x43
                 ; 0000 0196                         {
                 ; 0000 0197                            lcd_clear();
000322 940e 0627 	CALL SUBOPT_0xA
                 ; 0000 0198                            led =0;
                 ; 0000 0199                         }
                 ; 0000 019A                         lcd_gotoxy(0, 0);
                 _0x43:
000324 940e 05f3 	CALL SUBOPT_0x1
                 ; 0000 019B                         lcd_putsf("Buzzer");
                +
000326 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000327 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000328 940e 056d 	CALL _lcd_putsf
                 ; 0000 019C                         PORTA = digit[11];
                +
00032a 91e0 0270+LDS R30 , _digit + ( 11 )
                 	__GETB1MN _digit,11
00032c bbeb      	OUT  0x1B,R30
                 ; 0000 019D                         if (!buzzer)
00032d 91e0 02a5 	LDS  R30,_buzzer
00032f 91f0 02a6 	LDS  R31,_buzzer+1
000331 9730      	SBIW R30,0
000332 f411      	BRNE _0x44
                 ; 0000 019E                         {
                 ; 0000 019F                             PORTC = 0x02;
000333 e0e2      	LDI  R30,LOW(2)
000334 bbe5      	OUT  0x15,R30
                 ; 0000 01A0                         }
                 ; 0000 01A1                         if (timer > 488)
                 _0x44:
000335 940e 0606 	CALL SUBOPT_0x4
000337 f444      	BRGE _0x45
                 ; 0000 01A2                         {
                 ; 0000 01A3                             buzzer = 1;
000338 e0e1      	LDI  R30,LOW(1)
000339 e0f0      	LDI  R31,HIGH(1)
00033a 93e0 02a5 	STS  _buzzer,R30
00033c 93f0 02a6 	STS  _buzzer+1,R31
                 ; 0000 01A4                             PORTC = 0x00;
00033e e0e0      	LDI  R30,LOW(0)
00033f bbe5      	OUT  0x15,R30
                 ; 0000 01A5                         }
                 ; 0000 01A6                         break;
                 _0x45:
000340 c014      	RJMP _0x3F
                 ; 0000 01A7                     case 2:
                 _0x42:
000341 30e2      	CPI  R30,LOW(0x2)
000342 e0a0      	LDI  R26,HIGH(0x2)
000343 07fa      	CPC  R31,R26
000344 f481      	BRNE _0x3F
                 ; 0000 01A8                         if(led)
000345 940e 0621 	CALL SUBOPT_0x9
000347 f011      	BREQ _0x47
                 ; 0000 01A9                         {
                 ; 0000 01AA                            lcd_clear();
000348 940e 0627 	CALL SUBOPT_0xA
                 ; 0000 01AB                            led =0;
                 ; 0000 01AC                         }
                 ; 0000 01AD                         lcd_gotoxy(0, 0);
                 _0x47:
00034a 940e 05f3 	CALL SUBOPT_0x1
                 ; 0000 01AE                         lcd_putsf("Relay");
                +
00034c e9ac     +LDI R26 , LOW ( 2 * _0x0 + ( 24 ) )
00034d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW2FN _0x0,24
00034e 940e 056d 	CALL _lcd_putsf
                 ; 0000 01AF                         PORTC = 0x04;
000350 e0e4      	LDI  R30,LOW(4)
000351 bbe5      	OUT  0x15,R30
                 ; 0000 01B0                         PORTA = digit[12];
                +
000352 91e0 0271+LDS R30 , _digit + ( 12 )
                 	__GETB1MN _digit,12
                 _0x4A:
000354 bbeb      	OUT  0x1B,R30
                 ; 0000 01B1                         break;
                 ; 0000 01B2                 }
                 _0x3F:
                 ; 0000 01B3             }
                 _0x3C:
                 ; 0000 01B4         }
                 _0x32:
                 ; 0000 01B5     }
000355 ce43      	RJMP _0x1F
                 ; 0000 01B6 }
                 _0x48:
000356 cfff      	RJMP _0x48
                 ; .FEND
                 
                 	.DSEG
                 _0x2E:
000260           	.BYTE 0x5
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000357 93ba      	ST   -Y,R27
000358 93aa      	ST   -Y,R26
000359 931a      	ST   -Y,R17
00035a 930a      	ST   -Y,R16
00035b 81aa      	LDD  R26,Y+2
00035c 81bb      	LDD  R27,Y+2+1
00035d 9612      	ADIW R26,2
00035e 940e 06a5 	CALL __GETW1P
000360 9730      	SBIW R30,0
000361 f159      	BREQ _0x2000010
000362 81aa      	LDD  R26,Y+2
000363 81bb      	LDD  R27,Y+2+1
000364 9614      	ADIW R26,4
000365 940e 06a5 	CALL __GETW1P
000367 018f      	MOVW R16,R30
000368 9730      	SBIW R30,0
000369 f061      	BREQ _0x2000012
                +
00036a 3002     +CPI R16 , LOW ( 2 )
00036b e0e0     +LDI R30 , HIGH ( 2 )
00036c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00036d f098      	BRLO _0x2000013
00036e 01f8      	MOVW R30,R16
00036f 9731      	SBIW R30,1
000370 018f      	MOVW R16,R30
                +
000371 81aa     +LDD R26 , Y + 2
000372 81bb     +LDD R27 , Y + 2 + 1
000373 9614     +ADIW R26 , 4
000374 93ed     +ST X + , R30
000375 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000376 81aa      	LDD  R26,Y+2
000377 81bb      	LDD  R27,Y+2+1
000378 9612      	ADIW R26,2
000379 91ed      	LD   R30,X+
00037a 91fd      	LD   R31,X+
00037b 9631      	ADIW R30,1
00037c 93fe      	ST   -X,R31
00037d 93ee      	ST   -X,R30
00037e 9731      	SBIW R30,1
00037f 81ac      	LDD  R26,Y+4
000380 83a0      	STD  Z+0,R26
                 _0x2000013:
000381 81aa      	LDD  R26,Y+2
000382 81bb      	LDD  R27,Y+2+1
000383 940e 06a5 	CALL __GETW1P
000385 23ff      	TST  R31
000386 f02a      	BRMI _0x2000014
000387 91ed      	LD   R30,X+
000388 91fd      	LD   R31,X+
000389 9631      	ADIW R30,1
00038a 93fe      	ST   -X,R31
00038b 93ee      	ST   -X,R30
                 _0x2000014:
00038c c006      	RJMP _0x2000015
                 _0x2000010:
00038d 81aa      	LDD  R26,Y+2
00038e 81bb      	LDD  R27,Y+2+1
00038f efef      	LDI  R30,LOW(65535)
000390 efff      	LDI  R31,HIGH(65535)
000391 93ed      	ST   X+,R30
000392 93fc      	ST   X,R31
                 _0x2000015:
000393 8119      	LDD  R17,Y+1
000394 8108      	LDD  R16,Y+0
000395 940c 05bd 	JMP  _0x2080001
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000397 93ba      	ST   -Y,R27
000398 93aa      	ST   -Y,R26
000399 9726      	SBIW R28,6
00039a 940e 06b2 	CALL __SAVELOCR6
00039c e010      	LDI  R17,0
00039d 85ac      	LDD  R26,Y+12
00039e 85bd      	LDD  R27,Y+12+1
00039f e0e0      	LDI  R30,LOW(0)
0003a0 e0f0      	LDI  R31,HIGH(0)
0003a1 93ed      	ST   X+,R30
0003a2 93fc      	ST   X,R31
                 _0x2000016:
0003a3 89ea      	LDD  R30,Y+18
0003a4 89fb      	LDD  R31,Y+18+1
0003a5 9631      	ADIW R30,1
0003a6 8bea      	STD  Y+18,R30
0003a7 8bfb      	STD  Y+18+1,R31
0003a8 9731      	SBIW R30,1
0003a9 91e4      	LPM  R30,Z
0003aa 2f2e      	MOV  R18,R30
0003ab 30e0      	CPI  R30,0
0003ac f409      	BRNE PC+2
0003ad c115      	RJMP _0x2000018
0003ae 2fe1      	MOV  R30,R17
0003af 30e0      	CPI  R30,0
0003b0 f439      	BRNE _0x200001C
0003b1 3225      	CPI  R18,37
0003b2 f411      	BRNE _0x200001D
0003b3 e011      	LDI  R17,LOW(1)
0003b4 c002      	RJMP _0x200001E
                 _0x200001D:
0003b5 940e 062f 	CALL SUBOPT_0xB
                 _0x200001E:
0003b7 c10a      	RJMP _0x200001B
                 _0x200001C:
0003b8 30e1      	CPI  R30,LOW(0x1)
0003b9 f4a9      	BRNE _0x200001F
0003ba 3225      	CPI  R18,37
0003bb f419      	BRNE _0x2000020
0003bc 940e 062f 	CALL SUBOPT_0xB
0003be c102      	RJMP _0x20000CC
                 _0x2000020:
0003bf e012      	LDI  R17,LOW(2)
0003c0 e040      	LDI  R20,LOW(0)
0003c1 e000      	LDI  R16,LOW(0)
0003c2 322d      	CPI  R18,45
0003c3 f411      	BRNE _0x2000021
0003c4 e001      	LDI  R16,LOW(1)
0003c5 c0fc      	RJMP _0x200001B
                 _0x2000021:
0003c6 322b      	CPI  R18,43
0003c7 f411      	BRNE _0x2000022
0003c8 e24b      	LDI  R20,LOW(43)
0003c9 c0f8      	RJMP _0x200001B
                 _0x2000022:
0003ca 3220      	CPI  R18,32
0003cb f411      	BRNE _0x2000023
0003cc e240      	LDI  R20,LOW(32)
0003cd c0f4      	RJMP _0x200001B
                 _0x2000023:
0003ce c002      	RJMP _0x2000024
                 _0x200001F:
0003cf 30e2      	CPI  R30,LOW(0x2)
0003d0 f439      	BRNE _0x2000025
                 _0x2000024:
0003d1 e050      	LDI  R21,LOW(0)
0003d2 e013      	LDI  R17,LOW(3)
0003d3 3320      	CPI  R18,48
0003d4 f411      	BRNE _0x2000026
0003d5 6800      	ORI  R16,LOW(128)
0003d6 c0eb      	RJMP _0x200001B
                 _0x2000026:
0003d7 c003      	RJMP _0x2000027
                 _0x2000025:
0003d8 30e3      	CPI  R30,LOW(0x3)
0003d9 f009      	BREQ PC+2
0003da c0e7      	RJMP _0x200001B
                 _0x2000027:
0003db 3320      	CPI  R18,48
0003dc f010      	BRLO _0x200002A
0003dd 332a      	CPI  R18,58
0003de f008      	BRLO _0x200002B
                 _0x200002A:
0003df c007      	RJMP _0x2000029
                 _0x200002B:
0003e0 e0aa      	LDI  R26,LOW(10)
0003e1 9f5a      	MUL  R21,R26
0003e2 2d50      	MOV  R21,R0
0003e3 2fe2      	MOV  R30,R18
0003e4 53e0      	SUBI R30,LOW(48)
0003e5 0f5e      	ADD  R21,R30
0003e6 c0db      	RJMP _0x200001B
                 _0x2000029:
0003e7 2fe2      	MOV  R30,R18
0003e8 36e3      	CPI  R30,LOW(0x63)
0003e9 f449      	BRNE _0x200002F
0003ea 940e 0636 	CALL SUBOPT_0xC
0003ec 89e8      	LDD  R30,Y+16
0003ed 89f9      	LDD  R31,Y+16+1
0003ee 81a4      	LDD  R26,Z+4
0003ef 93aa      	ST   -Y,R26
0003f0 940e 063c 	CALL SUBOPT_0xD
0003f2 c0ce      	RJMP _0x2000030
                 _0x200002F:
0003f3 37e3      	CPI  R30,LOW(0x73)
0003f4 f441      	BRNE _0x2000032
0003f5 940e 0636 	CALL SUBOPT_0xC
0003f7 940e 0642 	CALL SUBOPT_0xE
0003f9 940e 05d3 	CALL _strlen
0003fb 2f1e      	MOV  R17,R30
0003fc c00a      	RJMP _0x2000033
                 _0x2000032:
0003fd 37e0      	CPI  R30,LOW(0x70)
0003fe f461      	BRNE _0x2000035
0003ff 940e 0636 	CALL SUBOPT_0xC
000401 940e 0642 	CALL SUBOPT_0xE
000403 940e 05df 	CALL _strlenf
000405 2f1e      	MOV  R17,R30
000406 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000407 6002      	ORI  R16,LOW(2)
000408 770f      	ANDI R16,LOW(127)
000409 e030      	LDI  R19,LOW(0)
00040a c034      	RJMP _0x2000036
                 _0x2000035:
00040b 36e4      	CPI  R30,LOW(0x64)
00040c f011      	BREQ _0x2000039
00040d 36e9      	CPI  R30,LOW(0x69)
00040e f411      	BRNE _0x200003A
                 _0x2000039:
00040f 6004      	ORI  R16,LOW(4)
000410 c002      	RJMP _0x200003B
                 _0x200003A:
000411 37e5      	CPI  R30,LOW(0x75)
000412 f431      	BRNE _0x200003C
                 _0x200003B:
000413 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000414 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000415 83ee      	STD  Y+6,R30
000416 83ff      	STD  Y+6+1,R31
000417 e015      	LDI  R17,LOW(5)
000418 c00c      	RJMP _0x200003D
                 _0x200003C:
000419 35e8      	CPI  R30,LOW(0x58)
00041a f411      	BRNE _0x200003F
00041b 6008      	ORI  R16,LOW(8)
00041c c003      	RJMP _0x2000040
                 _0x200003F:
00041d 37e8      	CPI  R30,LOW(0x78)
00041e f009      	BREQ PC+2
00041f c0a1      	RJMP _0x2000071
                 _0x2000040:
000420 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000421 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000422 83ee      	STD  Y+6,R30
000423 83ff      	STD  Y+6+1,R31
000424 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000425 ff02      	SBRS R16,2
000426 c014      	RJMP _0x2000042
000427 940e 0636 	CALL SUBOPT_0xC
000429 940e 064c 	CALL SUBOPT_0xF
00042b 85ab      	LDD  R26,Y+11
00042c 23aa      	TST  R26
00042d f43a      	BRPL _0x2000043
00042e 85ea      	LDD  R30,Y+10
00042f 85fb      	LDD  R31,Y+10+1
000430 940e 0677 	CALL __ANEGW1
000432 87ea      	STD  Y+10,R30
000433 87fb      	STD  Y+10+1,R31
000434 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000435 3040      	CPI  R20,0
000436 f011      	BREQ _0x2000044
000437 5f1f      	SUBI R17,-LOW(1)
000438 c001      	RJMP _0x2000045
                 _0x2000044:
000439 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00043a c004      	RJMP _0x2000046
                 _0x2000042:
00043b 940e 0636 	CALL SUBOPT_0xC
00043d 940e 064c 	CALL SUBOPT_0xF
                 _0x2000046:
                 _0x2000036:
00043f fd00      	SBRC R16,0
000440 c011      	RJMP _0x2000047
                 _0x2000048:
000441 1715      	CP   R17,R21
000442 f478      	BRSH _0x200004A
000443 ff07      	SBRS R16,7
000444 c008      	RJMP _0x200004B
000445 ff02      	SBRS R16,2
000446 c004      	RJMP _0x200004C
000447 7f0b      	ANDI R16,LOW(251)
000448 2f24      	MOV  R18,R20
000449 5011      	SUBI R17,LOW(1)
00044a c001      	RJMP _0x200004D
                 _0x200004C:
00044b e320      	LDI  R18,LOW(48)
                 _0x200004D:
00044c c001      	RJMP _0x200004E
                 _0x200004B:
00044d e220      	LDI  R18,LOW(32)
                 _0x200004E:
00044e 940e 062f 	CALL SUBOPT_0xB
000450 5051      	SUBI R21,LOW(1)
000451 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000452 2f31      	MOV  R19,R17
000453 ff01      	SBRS R16,1
000454 c017      	RJMP _0x200004F
                 _0x2000050:
000455 3030      	CPI  R19,0
000456 f0a1      	BREQ _0x2000052
000457 ff03      	SBRS R16,3
000458 c006      	RJMP _0x2000053
000459 81ee      	LDD  R30,Y+6
00045a 81ff      	LDD  R31,Y+6+1
00045b 9125      	LPM  R18,Z+
00045c 83ee      	STD  Y+6,R30
00045d 83ff      	STD  Y+6+1,R31
00045e c005      	RJMP _0x2000054
                 _0x2000053:
00045f 81ae      	LDD  R26,Y+6
000460 81bf      	LDD  R27,Y+6+1
000461 912d      	LD   R18,X+
000462 83ae      	STD  Y+6,R26
000463 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000464 940e 062f 	CALL SUBOPT_0xB
000466 3050      	CPI  R21,0
000467 f009      	BREQ _0x2000055
000468 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000469 5031      	SUBI R19,LOW(1)
00046a cfea      	RJMP _0x2000050
                 _0x2000052:
00046b c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00046c e320      	LDI  R18,LOW(48)
00046d 81ee      	LDD  R30,Y+6
00046e 81ff      	LDD  R31,Y+6+1
00046f 940e 06a9 	CALL __GETW1PF
000471 87e8      	STD  Y+8,R30
000472 87f9      	STD  Y+8+1,R31
000473 81ee      	LDD  R30,Y+6
000474 81ff      	LDD  R31,Y+6+1
000475 9632      	ADIW R30,2
000476 83ee      	STD  Y+6,R30
000477 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000478 85e8      	LDD  R30,Y+8
000479 85f9      	LDD  R31,Y+8+1
00047a 85aa      	LDD  R26,Y+10
00047b 85bb      	LDD  R27,Y+10+1
00047c 17ae      	CP   R26,R30
00047d 07bf      	CPC  R27,R31
00047e f050      	BRLO _0x200005C
00047f 5f2f      	SUBI R18,-LOW(1)
000480 85a8      	LDD  R26,Y+8
000481 85b9      	LDD  R27,Y+8+1
000482 85ea      	LDD  R30,Y+10
000483 85fb      	LDD  R31,Y+10+1
000484 1bea      	SUB  R30,R26
000485 0bfb      	SBC  R31,R27
000486 87ea      	STD  Y+10,R30
000487 87fb      	STD  Y+10+1,R31
000488 cfef      	RJMP _0x200005A
                 _0x200005C:
000489 332a      	CPI  R18,58
00048a f028      	BRLO _0x200005D
00048b ff03      	SBRS R16,3
00048c c002      	RJMP _0x200005E
00048d 5f29      	SUBI R18,-LOW(7)
00048e c001      	RJMP _0x200005F
                 _0x200005E:
00048f 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000490 fd04      	SBRC R16,4
000491 c01a      	RJMP _0x2000061
000492 3321      	CPI  R18,49
000493 f420      	BRSH _0x2000063
000494 85a8      	LDD  R26,Y+8
000495 85b9      	LDD  R27,Y+8+1
000496 9711      	SBIW R26,1
000497 f409      	BRNE _0x2000062
                 _0x2000063:
000498 c009      	RJMP _0x20000CD
                 _0x2000062:
000499 1753      	CP   R21,R19
00049a f010      	BRLO _0x2000067
00049b ff00      	SBRS R16,0
00049c c001      	RJMP _0x2000068
                 _0x2000067:
00049d c013      	RJMP _0x2000066
                 _0x2000068:
00049e e220      	LDI  R18,LOW(32)
00049f ff07      	SBRS R16,7
0004a0 c00b      	RJMP _0x2000069
0004a1 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0004a2 6100      	ORI  R16,LOW(16)
0004a3 ff02      	SBRS R16,2
0004a4 c007      	RJMP _0x200006A
0004a5 7f0b      	ANDI R16,LOW(251)
0004a6 934a      	ST   -Y,R20
0004a7 940e 063c 	CALL SUBOPT_0xD
0004a9 3050      	CPI  R21,0
0004aa f009      	BREQ _0x200006B
0004ab 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0004ac 940e 062f 	CALL SUBOPT_0xB
0004ae 3050      	CPI  R21,0
0004af f009      	BREQ _0x200006C
0004b0 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0004b1 5031      	SUBI R19,LOW(1)
0004b2 85a8      	LDD  R26,Y+8
0004b3 85b9      	LDD  R27,Y+8+1
0004b4 9712      	SBIW R26,2
0004b5 f008      	BRLO _0x2000059
0004b6 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0004b7 ff00      	SBRS R16,0
0004b8 c008      	RJMP _0x200006D
                 _0x200006E:
0004b9 3050      	CPI  R21,0
0004ba f031      	BREQ _0x2000070
0004bb 5051      	SUBI R21,LOW(1)
0004bc e2e0      	LDI  R30,LOW(32)
0004bd 93ea      	ST   -Y,R30
0004be 940e 063c 	CALL SUBOPT_0xD
0004c0 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0004c1 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0004c2 cee0      	RJMP _0x2000016
                 _0x2000018:
0004c3 85ac      	LDD  R26,Y+12
0004c4 85bd      	LDD  R27,Y+12+1
0004c5 940e 06a5 	CALL __GETW1P
0004c7 940e 06b9 	CALL __LOADLOCR6
0004c9 9664      	ADIW R28,20
0004ca 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004cb 92ff      	PUSH R15
0004cc 2ef8      	MOV  R15,R24
0004cd 9726      	SBIW R28,6
0004ce 940e 06b4 	CALL __SAVELOCR4
0004d0 940e 0654 	CALL SUBOPT_0x10
0004d2 9730      	SBIW R30,0
0004d3 f419      	BRNE _0x2000072
0004d4 efef      	LDI  R30,LOW(65535)
0004d5 efff      	LDI  R31,HIGH(65535)
0004d6 c023      	RJMP _0x2080004
                 _0x2000072:
0004d7 01de      	MOVW R26,R28
0004d8 9616      	ADIW R26,6
0004d9 940e 0673 	CALL __ADDW2R15
0004db 018d      	MOVW R16,R26
0004dc 940e 0654 	CALL SUBOPT_0x10
0004de 83ee      	STD  Y+6,R30
0004df 83ff      	STD  Y+6+1,R31
0004e0 e0e0      	LDI  R30,LOW(0)
0004e1 87e8      	STD  Y+8,R30
0004e2 87e9      	STD  Y+8+1,R30
0004e3 01de      	MOVW R26,R28
0004e4 961a      	ADIW R26,10
0004e5 940e 0673 	CALL __ADDW2R15
0004e7 940e 06a5 	CALL __GETW1P
0004e9 93fa      	ST   -Y,R31
0004ea 93ea      	ST   -Y,R30
0004eb 931a      	ST   -Y,R17
0004ec 930a      	ST   -Y,R16
0004ed e5e7      	LDI  R30,LOW(_put_buff_G100)
0004ee e0f3      	LDI  R31,HIGH(_put_buff_G100)
0004ef 93fa      	ST   -Y,R31
0004f0 93ea      	ST   -Y,R30
0004f1 01de      	MOVW R26,R28
0004f2 961a      	ADIW R26,10
0004f3 dea3      	RCALL __print_G100
0004f4 019f      	MOVW R18,R30
0004f5 81ae      	LDD  R26,Y+6
0004f6 81bf      	LDD  R27,Y+6+1
0004f7 e0e0      	LDI  R30,LOW(0)
0004f8 93ec      	ST   X,R30
0004f9 01f9      	MOVW R30,R18
                 _0x2080004:
0004fa 940e 06bb 	CALL __LOADLOCR4
0004fc 962a      	ADIW R28,10
0004fd 90ff      	POP  R15
0004fe 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0004ff 93aa      	ST   -Y,R26
000500 b3e8      	IN   R30,0x18
000501 70ef      	ANDI R30,LOW(0xF)
000502 2fae      	MOV  R26,R30
000503 81e8      	LD   R30,Y
000504 7fe0      	ANDI R30,LOW(0xF0)
000505 2bea      	OR   R30,R26
000506 bbe8      	OUT  0x18,R30
                +
000507 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000508 958a     +DEC R24
000509 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00050a 9ac3      	SBI  0x18,3
                +
00050b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00050c 958a     +DEC R24
00050d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00050e 98c3      	CBI  0x18,3
                +
00050f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000510 958a     +DEC R24
000511 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000512 c09a      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000513 93aa      	ST   -Y,R26
000514 81a8      	LD   R26,Y
000515 dfe9      	RCALL __lcd_write_nibble_G101
000516 81e8          ld    r30,y
000517 95e2          swap  r30
000518 83e8          st    y,r30
000519 81a8      	LD   R26,Y
00051a dfe4      	RCALL __lcd_write_nibble_G101
                +
00051b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00051c 958a     +DEC R24
00051d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00051e c08e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00051f 93aa      	ST   -Y,R26
000520 81e8      	LD   R30,Y
000521 e0f0      	LDI  R31,0
000522 55e7      	SUBI R30,LOW(-__base_y_G101)
000523 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000524 81e0      	LD   R30,Z
000525 81a9      	LDD  R26,Y+1
000526 0fae      	ADD  R26,R30
000527 dfeb      	RCALL __lcd_write_data
000528 81e9      	LDD  R30,Y+1
000529 93e0 02ad 	STS  __lcd_x,R30
00052b 81e8      	LD   R30,Y
00052c 93e0 02ae 	STS  __lcd_y,R30
00052e 9622      	ADIW R28,2
00052f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000530 e0a2      	LDI  R26,LOW(2)
000531 940e 065b 	CALL SUBOPT_0x11
000533 e0ac      	LDI  R26,LOW(12)
000534 dfde      	RCALL __lcd_write_data
000535 e0a1      	LDI  R26,LOW(1)
000536 940e 065b 	CALL SUBOPT_0x11
000538 e0e0      	LDI  R30,LOW(0)
000539 93e0 02ae 	STS  __lcd_y,R30
00053b 93e0 02ad 	STS  __lcd_x,R30
00053d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00053e 93aa      	ST   -Y,R26
00053f 81a8      	LD   R26,Y
000540 30aa      	CPI  R26,LOW(0xA)
000541 f031      	BREQ _0x2020005
000542 91e0 02af 	LDS  R30,__lcd_maxx
000544 91a0 02ad 	LDS  R26,__lcd_x
000546 17ae      	CP   R26,R30
000547 f060      	BRLO _0x2020004
                 _0x2020005:
000548 e0e0      	LDI  R30,LOW(0)
000549 93ea      	ST   -Y,R30
00054a 91a0 02ae 	LDS  R26,__lcd_y
00054c 5faf      	SUBI R26,-LOW(1)
00054d 93a0 02ae 	STS  __lcd_y,R26
00054f dfcf      	RCALL _lcd_gotoxy
000550 81a8      	LD   R26,Y
000551 30aa      	CPI  R26,LOW(0xA)
000552 f409      	BRNE _0x2020007
000553 c059      	RJMP _0x2080002
                 _0x2020007:
                 _0x2020004:
000554 91e0 02ad 	LDS  R30,__lcd_x
000556 5fef      	SUBI R30,-LOW(1)
000557 93e0 02ad 	STS  __lcd_x,R30
000559 9ac0      	SBI  0x18,0
00055a 81a8      	LD   R26,Y
00055b dfb7      	RCALL __lcd_write_data
00055c 98c0      	CBI  0x18,0
00055d c04f      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00055e 93ba      	ST   -Y,R27
00055f 93aa      	ST   -Y,R26
000560 931a      	ST   -Y,R17
                 _0x2020008:
000561 81a9      	LDD  R26,Y+1
000562 81ba      	LDD  R27,Y+1+1
000563 91ed      	LD   R30,X+
000564 83a9      	STD  Y+1,R26
000565 83ba      	STD  Y+1+1,R27
000566 2f1e      	MOV  R17,R30
000567 30e0      	CPI  R30,0
000568 f019      	BREQ _0x202000A
000569 2fa1      	MOV  R26,R17
00056a dfd3      	RCALL _lcd_putchar
00056b cff5      	RJMP _0x2020008
                 _0x202000A:
00056c c010      	RJMP _0x2080003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00056d 93ba      	ST   -Y,R27
00056e 93aa      	ST   -Y,R26
00056f 931a      	ST   -Y,R17
                 _0x202000B:
000570 81e9      	LDD  R30,Y+1
000571 81fa      	LDD  R31,Y+1+1
000572 9631      	ADIW R30,1
000573 83e9      	STD  Y+1,R30
000574 83fa      	STD  Y+1+1,R31
000575 9731      	SBIW R30,1
000576 91e4      	LPM  R30,Z
000577 2f1e      	MOV  R17,R30
000578 30e0      	CPI  R30,0
000579 f019      	BREQ _0x202000D
00057a 2fa1      	MOV  R26,R17
00057b dfc2      	RCALL _lcd_putchar
00057c cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x2080003:
00057d 8118      	LDD  R17,Y+0
00057e 9623      	ADIW R28,3
00057f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000580 93aa      	ST   -Y,R26
000581 b3e7      	IN   R30,0x17
000582 6fe0      	ORI  R30,LOW(0xF0)
000583 bbe7      	OUT  0x17,R30
000584 9abb      	SBI  0x17,3
000585 9ab8      	SBI  0x17,0
000586 9ab9      	SBI  0x17,1
000587 98c3      	CBI  0x18,3
000588 98c0      	CBI  0x18,0
000589 98c1      	CBI  0x18,1
00058a 81e8      	LD   R30,Y
00058b 93e0 02af 	STS  __lcd_maxx,R30
00058d 58e0      	SUBI R30,-LOW(128)
                +
00058e 93e0 02ab+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000590 81e8      	LD   R30,Y
000591 54e0      	SUBI R30,-LOW(192)
                +
000592 93e0 02ac+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000594 e1a4      	LDI  R26,LOW(20)
000595 e0b0      	LDI  R27,0
000596 940e 0669 	CALL _delay_ms
000598 940e 0661 	CALL SUBOPT_0x12
00059a 940e 0661 	CALL SUBOPT_0x12
00059c 940e 0661 	CALL SUBOPT_0x12
00059e e2a0      	LDI  R26,LOW(32)
00059f df5f      	RCALL __lcd_write_nibble_G101
                +
0005a0 ec88     +LDI R24 , LOW ( 200 )
0005a1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0005a2 9701     +SBIW R24 , 1
0005a3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0005a4 e2a8      	LDI  R26,LOW(40)
0005a5 df6d      	RCALL __lcd_write_data
0005a6 e0a4      	LDI  R26,LOW(4)
0005a7 df6b      	RCALL __lcd_write_data
0005a8 e8a5      	LDI  R26,LOW(133)
0005a9 df69      	RCALL __lcd_write_data
0005aa e0a6      	LDI  R26,LOW(6)
0005ab df67      	RCALL __lcd_write_data
0005ac df83      	RCALL _lcd_clear
                 _0x2080002:
0005ad 9621      	ADIW R28,1
0005ae 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0005af 93ba      	ST   -Y,R27
0005b0 93aa      	ST   -Y,R26
0005b1 81b9          ldd  r27,y+1
0005b2 81a8          ld   r26,y
0005b3 9610          adiw r26,0
0005b4 f031          breq memset1
0005b5 81fc          ldd  r31,y+4
0005b6 81eb          ldd  r30,y+3
0005b7 816a          ldd  r22,y+2
                 memset0:
0005b8 9361          st   z+,r22
0005b9 9711          sbiw r26,1
0005ba f7e9          brne memset0
                 memset1:
0005bb 81eb          ldd  r30,y+3
0005bc 81fc          ldd  r31,y+4
                 _0x2080001:
0005bd 9625      	ADIW R28,5
0005be 9508      	RET
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
0005bf 93ba      	ST   -Y,R27
0005c0 93aa      	ST   -Y,R26
0005c1 91e9          ld   r30,y+
0005c2 91f9          ld   r31,y+
0005c3 91a9          ld   r26,y+
0005c4 91b9          ld   r27,y+
                 strcmp0:
0005c5 916d          ld   r22,x+
0005c6 9171          ld   r23,z+
0005c7 1767          cp   r22,r23
0005c8 f421          brne strcmp1
0005c9 2366          tst  r22
0005ca f7d1          brne strcmp0
                 strcmp3:
0005cb 27ee          clr  r30
0005cc 9508          ret
                 strcmp1:
0005cd 1b67          sub  r22,r23
0005ce f3e1          breq strcmp3
0005cf e0e1          ldi  r30,1
0005d0 f408          brcc strcmp2
0005d1 50e2          subi r30,2
                 strcmp2:
0005d2 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0005d3 93ba      	ST   -Y,R27
0005d4 93aa      	ST   -Y,R26
0005d5 91a9          ld   r26,y+
0005d6 91b9          ld   r27,y+
0005d7 27ee          clr  r30
0005d8 27ff          clr  r31
                 strlen0:
0005d9 916d          ld   r22,x+
0005da 2366          tst  r22
0005db f011          breq strlen1
0005dc 9631          adiw r30,1
0005dd cffb          rjmp strlen0
                 strlen1:
0005de 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0005df 93ba      	ST   -Y,R27
0005e0 93aa      	ST   -Y,R26
0005e1 27aa          clr  r26
0005e2 27bb          clr  r27
0005e3 91e9          ld   r30,y+
0005e4 91f9          ld   r31,y+
                 strlenf0:
0005e5 9005      	lpm  r0,z+
0005e6 2000          tst  r0
0005e7 f011          breq strlenf1
0005e8 9611          adiw r26,1
0005e9 cffb          rjmp strlenf0
                 strlenf1:
0005ea 01fd          movw r30,r26
0005eb 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _digit:
000265           	.BYTE 0x10
                 _keypadclicked:
000275           	.BYTE 0x2
                 _iputpass:
000277           	.BYTE 0xF
                 _temp:
000286           	.BYTE 0xF
                 _passwordPromptShown:
000295           	.BYTE 0x2
                 _menu_state:
000297           	.BYTE 0x2
                 _menu:
000299           	.BYTE 0x2
                 _menunext:
00029b           	.BYTE 0x2
                 _menuselect:
00029d           	.BYTE 0x2
                 _menutogglereq:
00029f           	.BYTE 0x2
                 _ismenu:
0002a1           	.BYTE 0x2
                 _menutoggle:
0002a3           	.BYTE 0x2
                 _buzzer:
0002a5           	.BYTE 0x2
                 _led:
0002a7           	.BYTE 0x2
                 __base_y_G101:
0002a9           	.BYTE 0x4
                 __lcd_x:
0002ad           	.BYTE 0x1
                 __lcd_y:
0002ae           	.BYTE 0x1
                 __lcd_maxx:
0002af           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0005ec 93aa      	ST   -Y,R26
0005ed 93ba      	ST   -Y,R27
0005ee 93ea      	ST   -Y,R30
0005ef 93fa      	ST   -Y,R31
0005f0 b7ef      	IN   R30,SREG
0005f1 93ea      	ST   -Y,R30
0005f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
0005f3 e0e0      	LDI  R30,LOW(0)
0005f4 93ea      	ST   -Y,R30
0005f5 e0a0      	LDI  R26,LOW(0)
0005f6 940c 051f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0005f8 940e 056d 	CALL _lcd_putsf
0005fa e0e0      	LDI  R30,LOW(0)
0005fb 93ea      	ST   -Y,R30
0005fc e0a1      	LDI  R26,LOW(1)
0005fd 940c 051f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0005ff e6a5      	LDI  R26,LOW(_digit)
000600 e0b2      	LDI  R27,HIGH(_digit)
000601 0daa      	ADD  R26,R10
000602 1dbb      	ADC  R27,R11
000603 91ec      	LD   R30,X
000604 bbeb      	OUT  0x1B,R30
000605 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000606 eee8      	LDI  R30,LOW(488)
000607 e0f1      	LDI  R31,HIGH(488)
000608 15e4      	CP   R30,R4
000609 05f5      	CPC  R31,R5
00060a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00060b e7e7      	LDI  R30,LOW(_iputpass)
00060c e0f2      	LDI  R31,HIGH(_iputpass)
00060d 93fa      	ST   -Y,R31
00060e 93ea      	ST   -Y,R30
00060f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000610 e0e0      	LDI  R30,LOW(0)
000611 93e0 02a3 	STS  _menutoggle,R30
000613 93e0 02a4 	STS  _menutoggle+1,R30
000615 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000616 e0e0      	LDI  R30,LOW(0)
000617 93ea      	ST   -Y,R30
000618 e0af      	LDI  R26,LOW(15)
000619 e0b0      	LDI  R27,0
00061a 940c 05af 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00061c e8e6      	LDI  R30,LOW(_temp)
00061d e0f2      	LDI  R31,HIGH(_temp)
00061e 93fa      	ST   -Y,R31
00061f 93ea      	ST   -Y,R30
000620 cff5      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000621 91e0 02a7 	LDS  R30,_led
000623 91f0 02a8 	LDS  R31,_led+1
000625 9730      	SBIW R30,0
000626 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000627 940e 0530 	CALL _lcd_clear
000629 e0e0      	LDI  R30,LOW(0)
00062a 93e0 02a7 	STS  _led,R30
00062c 93e0 02a8 	STS  _led+1,R30
00062e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
00062f 932a      	ST   -Y,R18
000630 85ad      	LDD  R26,Y+13
000631 85be      	LDD  R27,Y+13+1
000632 85ef      	LDD  R30,Y+15
000633 89f8      	LDD  R31,Y+15+1
000634 9509      	ICALL
000635 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
000636 89e8      	LDD  R30,Y+16
000637 89f9      	LDD  R31,Y+16+1
000638 9734      	SBIW R30,4
000639 8be8      	STD  Y+16,R30
00063a 8bf9      	STD  Y+16+1,R31
00063b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
00063c 85ad      	LDD  R26,Y+13
00063d 85be      	LDD  R27,Y+13+1
00063e 85ef      	LDD  R30,Y+15
00063f 89f8      	LDD  R31,Y+15+1
000640 9509      	ICALL
000641 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000642 89a8      	LDD  R26,Y+16
000643 89b9      	LDD  R27,Y+16+1
000644 9614      	ADIW R26,4
000645 940e 06a5 	CALL __GETW1P
000647 83ee      	STD  Y+6,R30
000648 83ff      	STD  Y+6+1,R31
000649 81ae      	LDD  R26,Y+6
00064a 81bf      	LDD  R27,Y+6+1
00064b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
00064c 89a8      	LDD  R26,Y+16
00064d 89b9      	LDD  R27,Y+16+1
00064e 9614      	ADIW R26,4
00064f 940e 06a5 	CALL __GETW1P
000651 87ea      	STD  Y+10,R30
000652 87fb      	STD  Y+10+1,R31
000653 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000654 01de      	MOVW R26,R28
000655 961c      	ADIW R26,12
000656 940e 0673 	CALL __ADDW2R15
000658 940e 06a5 	CALL __GETW1P
00065a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00065b 940e 0513 	CALL __lcd_write_data
00065d e0a3      	LDI  R26,LOW(3)
00065e e0b0      	LDI  R27,0
00065f 940c 0669 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
000661 e3a0      	LDI  R26,LOW(48)
000662 940e 04ff 	CALL __lcd_write_nibble_G101
                +
000664 ec88     +LDI R24 , LOW ( 200 )
000665 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000666 9701     +SBIW R24 , 1
000667 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000668 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000669 9610      	adiw r26,0
00066a f039      	breq __delay_ms1
                 __delay_ms0:
00066b 95a8      	wdr
                +
00066c ed80     +LDI R24 , LOW ( 0x7D0 )
00066d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00066e 9701     +SBIW R24 , 1
00066f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000670 9711      	sbiw r26,1
000671 f7c9      	brne __delay_ms0
                 __delay_ms1:
000672 9508      	ret
                 
                 __ADDW2R15:
000673 2400      	CLR  R0
000674 0daf      	ADD  R26,R15
000675 1db0      	ADC  R27,R0
000676 9508      	RET
                 
                 __ANEGW1:
000677 95f1      	NEG  R31
000678 95e1      	NEG  R30
000679 40f0      	SBCI R31,0
00067a 9508      	RET
                 
                 __ASRW4:
00067b 95f5      	ASR  R31
00067c 95e7      	ROR  R30
                 __ASRW3:
00067d 95f5      	ASR  R31
00067e 95e7      	ROR  R30
                 __ASRW2:
00067f 95f5      	ASR  R31
000680 95e7      	ROR  R30
000681 95f5      	ASR  R31
000682 95e7      	ROR  R30
000683 9508      	RET
                 
                 __DIVW21U:
000684 2400      	CLR  R0
000685 2411      	CLR  R1
000686 e190      	LDI  R25,16
                 __DIVW21U1:
000687 0faa      	LSL  R26
000688 1fbb      	ROL  R27
000689 1c00      	ROL  R0
00068a 1c11      	ROL  R1
00068b 1a0e      	SUB  R0,R30
00068c 0a1f      	SBC  R1,R31
00068d f418      	BRCC __DIVW21U2
00068e 0e0e      	ADD  R0,R30
00068f 1e1f      	ADC  R1,R31
000690 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000691 60a1      	SBR  R26,1
                 __DIVW21U3:
000692 959a      	DEC  R25
000693 f799      	BRNE __DIVW21U1
000694 01fd      	MOVW R30,R26
000695 01d0      	MOVW R26,R0
000696 9508      	RET
                 
                 __MODW21:
000697 94e8      	CLT
000698 ffb7      	SBRS R27,7
000699 c004      	RJMP __MODW211
00069a 95a0      	COM  R26
00069b 95b0      	COM  R27
00069c 9611      	ADIW R26,1
00069d 9468      	SET
                 __MODW211:
00069e fdf7      	SBRC R31,7
00069f dfd7      	RCALL __ANEGW1
0006a0 dfe3      	RCALL __DIVW21U
0006a1 01fd      	MOVW R30,R26
0006a2 f40e      	BRTC __MODW212
0006a3 dfd3      	RCALL __ANEGW1
                 __MODW212:
0006a4 9508      	RET
                 
                 __GETW1P:
0006a5 91ed      	LD   R30,X+
0006a6 91fc      	LD   R31,X
0006a7 9711      	SBIW R26,1
0006a8 9508      	RET
                 
                 __GETW1PF:
0006a9 9005      	LPM  R0,Z+
0006aa 91f4      	LPM  R31,Z
0006ab 2de0      	MOV  R30,R0
0006ac 9508      	RET
                 
                 __PUTPARD1:
0006ad 937a      	ST   -Y,R23
0006ae 936a      	ST   -Y,R22
0006af 93fa      	ST   -Y,R31
0006b0 93ea      	ST   -Y,R30
0006b1 9508      	RET
                 
                 __SAVELOCR6:
0006b2 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006b3 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006b4 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006b5 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006b6 931a      	ST   -Y,R17
0006b7 930a      	ST   -Y,R16
0006b8 9508      	RET
                 
                 __LOADLOCR6:
0006b9 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0006ba 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0006bb 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0006bc 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0006bd 8119      	LDD  R17,Y+1
0006be 8108      	LD   R16,Y
0006bf 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  27 r1 :   5 r2 :   0 r3 :   0 r4 :  10 r5 :   8 r6 :   2 r7 :   1 
r8 :   9 r9 :   5 r10:   5 r11:   3 r12:   5 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  46 r18:  29 r19:   8 r20:   9 r21:  17 r22:  12 r23:   5 
r24:  23 r25:   7 r26: 188 r27:  71 r28:  17 r29:   1 r30: 417 r31: 147 
x  :  30 y  : 216 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   6 
adiw  :  33 and   :   0 andi  :   7 asr   :   4 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  34 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  61 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 102 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  30 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  12 cpc   :  28 cpi   :  54 cpse  :   0 dec   :   6 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  28 ld    :  45 ldd   :  85 ldi   : 236 
lds   :  35 lpm   :  16 lsl   :   1 lsr   :   0 mov   :  21 movw  :  29 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   8 out   :  55 pop   :   1 push  :   1 rcall :  22 ret   :  37 
reti  :   2 rjmp  :  95 rol   :   3 ror   :   4 sbc   :   2 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  35 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  88 std   :  35 sts   :  58 sub   :   3 subi  :  21 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d80   3298    158   3456   32768  10.5%
[.dseg] 0x000060 0x0002b0      0     80     80    2048   3.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
